import random
from abc import ABC


class Entity(ABC):

    """–ö–æ—Ä–Ω–µ–≤–æ–π –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤ –∏ –æ–±—ä–µ–∫—Ç–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤ —Å–∏–º—É–ª—è—Ü–∏–∏"""

    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y

    def show(self):

        """–í—ã–≤–æ–¥–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –Ω–∞ —ç–∫—Ä–∞–Ω"""

        pass


class Grass(Entity):

    """–ö–ª–∞—Å—Å —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö"""

    name = '–¢—Ä–∞–≤–∞'

    def show(self):
        return 'üå∏'


class Rock(Entity):

    """–ö–ª–∞—Å—Å –≥–æ—Ä—ã"""

    name = '–ì–æ—Ä–∞'

    def show(self):
        return 'üóª'


class Empty(Entity):

    """ –ö–ª–∞—Å—Å –ø—É—Å—Ç–æ–π –∫–ª–µ—Ç–∫–∏"""

    name = '–ü—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞'

    def show(self):
        return '‚¨õ'


class Tree(Entity):

    """–ö–ª–∞—Å—Å –¥–µ—Ä–µ–≤–∞"""

    name = '–î–µ—Ä–µ–≤–æ'

    def show(self):
        return 'üå≤'


class Creature(Entity):

    """–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö"""

    def __init__(self, x: int, y: int, hungry: int, hp: int) -> None:
        super().__init__(x, y)
        self.hungry = hungry
        self.hp = hp

    def make_move(self, name, food, world, logs):

        """–ü–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ"""

        old_place = self.x, self.y
        if self.hungry < 3:
            self.x, self.y = random.choice((world.find_entity_cells(food)))
            self.hungry += 3
            logs.append(f'{name} {old_place} —Å—ä–µ–ª(–∞) —Ä–µ—Å—É—Ä—Å –Ω–∞ –∫–ª–µ—Ç–∫–µ {self.x, self.y}')

        else:
            self.x, self.y = random.choice((world.find_entity_cells(Empty)))
            self.hungry -= 1
            logs.append(f'{name} —Å –∫–ª–µ—Ç–∫–∏ {old_place} –ø–µ—Ä–µ—àe–ª(—à–ª–∞) –Ω–∞ –∫–ª–µ—Ç–∫—É {self.x, self.y}')
        world.clear_cell(old_place)

    def disappeared(self, world, logs):

        """–ò—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ"""

        pass


class Herbivore(Creature):

    """–ö–ª–∞—Å—Å —Ç—Ä–∞–≤–æ—è–¥–Ω–æ–≥–æ"""

    name = '–ó–∞—è—Ü'
    food = Grass

    def __init__(self, x: int, y: int, hungry: int = 5, hp: int = 3) -> None:
        super().__init__(x, y, hungry, hp)

    def show(self):
        return 'üê∞'

    def disappeared(self, world, logs):
        world.clear_cell((self.x, self.y))
        logs.append(f'{self.name} c –∫–ª–µ—Ç–∫–∏ {self.x, self.y} –∏—Å—á–µ–∑(hp —Å—Ç–∞–ª —Ä–∞–≤–Ω—ã–º 0)')


class Predator(Creature):

    """–ö–ª–∞—Å—Å —Ö–∏—â–Ω–∏–∫–∞"""

    name = '–õ–∏—Å–∞'
    food = Herbivore

    def __init__(self, x: int, y: int, hungry: int = 5, hp: int = 3) -> None:
        super().__init__(x, y, hungry, hp)
        self.hungry = hungry
        self.hp = hp

    def show(self):
        return 'ü¶ä'

    def attack(self, world, logs):

        """–£–∫—É—Å —Ç—Ä–∞–≤–æ—è–¥–Ω–æ–≥–æ(—Ö–∏—â–Ω–∏–∫ –∫—É—Å–∞–µ—Ç —Ç—Ä–∞–≤–æ—è–¥–Ω–æ–µ –Ω–∞ –≤—Å–µ—Ö —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–ª–µ—Ç–∫–∞—Ö)"""

        herbivore_cells = world.find_entity_cells(Herbivore)
        for x, y in herbivore_cells:
            if abs(self.x - x) <= 1 and abs(self.y - y) <= 1:
                world.map[x, y].hp -= 1
                logs.append(f'{world.map[x, y].name} –Ω–∞ –∫–ª–µ—Ç–∫–µ {x, y} –ø–æ—Ç–µ—Ä—è–ª 1 hp –æ—Ç –∑–¥–æ—Ä–æ–≤—å—è')
